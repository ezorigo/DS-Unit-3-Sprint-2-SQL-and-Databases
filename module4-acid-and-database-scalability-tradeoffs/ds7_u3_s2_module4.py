# -*- coding: utf-8 -*-
"""DS7_u3_s2_module4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUJ3DFpB3gwdzcfYJBaTEyiss3uTsy-0
"""

!pip install pymongo

import pandas as pd 
import sqlite3 
import pymongo

!curl ipecho.net/plain

df = pd.read_csv('https://raw.githubusercontent.com/ezorigo/DS-Unit-3-Sprint-2-SQL-and-Databases/master/module2-sql-for-analysis/titanic.csv')

conn = sqlite3.connect('titanic.sqlite3')

df.to_sql("titanic", conn)

curs = conn.cursor()

curs.execute('PRAGMA table_info(titanic)').fetchall()

passengers = curs.execute('SELECT * FROM titanic').fetchall()

client = pymongo.MongoClient("mongodb://admin:7xpCfXxWjVv2QgRK@cluster0-shard-00-00-kibgi.mongodb.net:27017,cluster0-shard-00-01-kibgi.mongodb.net:27017,cluster0-shard-00-02-kibgi.mongodb.net:27017/titanic?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority")
db = client.titanic

for passenger in passengers:
    db.titanic.insert_one({
        'index': passenger[0],
        'Survived': passenger[1],
        'Pclass': passenger[2],
        'Name': passenger[3],
        'Sex': passenger[4],
        'Age': passenger[5],
        'Siblings/Spouses Aboard': passenger[6],
        'Parents/Children Aboard': passenger[7],
        'Fare': passenger[8]
    })

list(db.titanic.find())

df['Pclass'].unique()

total = list(db.titanic.find())
survivor = list(db.titanic.find({'Survived': 1}))
nonsurvivor = list(db.titanic.find({'Survived': 0}))
class1 = list(db.titanic.find({'Pclass': 1}))
class2 = list(db.titanic.find({'Pclass': 2}))
class3 = list(db.titanic.find({'Pclass': 3}))

print('{:.<40}: {:}' .format('# Passengers who survived', len(list(db.titanic.find({'Survived': 1})))))
print('{:.<40}: {:}' .format('# Passengers in class 1', len(list(db.titanic.find({'Pclass': 1})))))
print('{:.<40}: {:}' .format('# Passengers who survived from class 1', len(list(db.titanic.find({'Pclass': 1, 'Survived': 1})))))
print('{:.<40}: {:}' .format('# Passengers who died from class 1', len(list(db.titanic.find({'Pclass': 1, 'Survived': 0})))))
print('{:.<40}: {:}' .format('# Passengers in class 2', len(list(db.titanic.find({'Pclass': 2})))))
print('{:.<40}: {:}' .format('# Passengers who survived from class 2', len(list(db.titanic.find({'Pclass': 2, 'Survived': 1})))))
print('{:.<40}: {:}' .format('# Passengers who died from class 2', len(list(db.titanic.find({'Pclass': 2, 'Survived': 0})))))
print('{:.<40}: {:}' .format('# Passengers in class 3', len(list(db.titanic.find({'Pclass': 3})))))
print('{:.<40}: {:}' .format('# Passengers who survived from class 3', len(list(db.titanic.find({'Pclass': 3, 'Survived': 1})))))
print('{:.<40}: {:}' .format('# Passengers who died from class 3', len(list(db.titanic.find({'Pclass': 3, 'Survived': 0})))))
print('{:.<40}: {:.2f}' .format('Average age of survivor', sum(d['Age'] for d in survivor) / len(survivor)))
print('{:.<40}: {:.2f}' .format('Average age of nonsurvivor', sum(d['Age'] for d in nonsurvivor) / len(nonsurvivor)))
print('{:.<40}: {:.2f}' .format('Average age of class 1', sum(d['Age'] for d in class1) / len(class1)))
print('{:.<40}: {:.2f}' .format('Average age of class 2', sum(d['Age'] for d in class2) / len(class2)))
print('{:.<40}: {:.2f}' .format('Average age of class 3', sum(d['Age'] for d in class3) / len(class3)))
print('{:.<40}: {:.2f}' .format('Average fare of class 1', sum(d['Fare'] for d in class1) / len(class1)))
print('{:.<40}: {:.2f}' .format('Average fare of class 2', sum(d['Fare'] for d in class2) / len(class2)))
print('{:.<40}: {:.2f}' .format('Average fare of class 3', sum(d['Fare'] for d in class3) / len(class3)))
print('{:.<40}: {:.2f}' .format('Average fare of survivor', sum(d['Fare'] for d in survivor) / len(survivor)))
print('{:.<40}: {:.2f}' .format('Average fare of nonsurvivor', sum(d['Fare'] for d in nonsurvivor) / len(nonsurvivor)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses aboard', sum(d['Siblings/Spouses Aboard'] for d in total) / len(total)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses of class 1', sum(d['Siblings/Spouses Aboard'] for d in class1) / len(class1)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses of class 2', sum(d['Siblings/Spouses Aboard'] for d in class2) / len(class2)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses of class 3', sum(d['Siblings/Spouses Aboard'] for d in class3) / len(class3)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses of survivor', sum(d['Siblings/Spouses Aboard'] for d in survivor) / len(survivor)))
print('{:.<40}: {:.2f}' .format('Average # siblings/spouses of nonsurvivor', sum(d['Siblings/Spouses Aboard'] for d in nonsurvivor) / len(nonsurvivor)))
print('{:.<40}: {:.2f}' .format('Average # parents/children aboard', sum(d['Parents/Children Aboard'] for d in total) / len(total)))
print('{:.<40}: {:.2f}' .format('Average # parents/children of class 1', sum(d['Parents/Children Aboard'] for d in class1) / len(class1)))
print('{:.<40}: {:.2f}' .format('Average # parents/children of class 2', sum(d['Parents/Children Aboard'] for d in class2) / len(class2)))
print('{:.<40}: {:.2f}' .format('Average # parents/children of class 3', sum(d['Parents/Children Aboard'] for d in class3) / len(class3)))
print('{:.<40}: {:.2f}' .format('Average # parents/children of survivor', sum(d['Parents/Children Aboard'] for d in survivor) / len(survivor)))
print('{:.<40}: {:.2f}' .format('Average # parents/children of nonsurvivor', sum(d['Parents/Children Aboard'] for d in nonsurvivor) / len(nonsurvivor)))
print('{:.<40}: {:}' .format('Do any passengers have the same name?', 'no'))

